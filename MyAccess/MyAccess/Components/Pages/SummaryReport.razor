@using System.Collections.Concurrent
@using System.Globalization
@using MyAccess.Services
@using System.Linq
@using System.Text.RegularExpressions
@inject IJSRuntime JSRuntime
@inject PdfReportService PdfReport

<div class="report-container">
    <div class="report-header">
        <h2><i class="fas fa-chart-pie"></i> Расширенный сводный отчет</h2>
        <div class="header-info">
            <div class="info-item">
                <span class="label">Таблица:</span>
                <span class="value">@TableName</span>
            </div>
            <div class="info-item">
                <span class="label">Записей:</span>
                <span class="value">@Data.Count</span>
            </div>
            <div class="info-item">
                <span class="label">Сформирован:</span>
                <span class="value">@DateTime.Now.ToString("dd.MM.yyyy HH:mm")</span>
            </div>
        </div>
    </div>

    <div class="stats-grid">
        <!-- Блок общей статистики -->
        <div class="stat-card wide-card">
            <h3><i class="fas fa-table"></i> Общая информация</h3>
            <div class="grid-container">
                <div class="grid-item">
                    <div class="stat-value">@Columns.Count</div>
                    <div class="stat-label">Всего полей</div>
                </div>
                <div class="grid-item">
                    <div class="stat-value">@Columns.Count(c => c.IsNumeric)</div>
                    <div class="stat-label">Числовых полей</div>
                </div>
                <div class="grid-item">
                    <div class="stat-value">@Columns.Count(c => !c.IsNumeric)</div>
                    <div class="stat-label">Текстовых полей</div>
                </div>
                <div class="grid-item">
                    <div class="stat-value">@CalculateNullPercentage()%</div>
                    <div class="stat-label">Заполненность данных</div>
                </div>
            </div>
        </div>

        <!-- Блок числовых полей -->
        @foreach (var column in Columns.Where(c => c.IsNumeric))
        {
            var values = GetNumericValues(column.Name);
            if (values.Any())
            {
                <div class="stat-card">
                    <div class="card-header">
                        <i class="fas fa-calculator"></i> @GetColumnTranslation(column.Name)
                        <span class="data-type">(числовой)</span>
                    </div>
                    
                    <div class="stats-row">
                        <div class="stat">
                            <div class="stat-value">@values.Sum().ToString("N2")</div>
                            <div class="stat-label">Сумма</div>
                        </div>
                        <div class="stat">
                            <div class="stat-value">@values.Average().ToString("N2")</div>
                            <div class="stat-label">Среднее</div>
                        </div>
                    </div>
                    
                    <div class="stats-row">
                        <div class="stat">
                            <div class="stat-value">@values.Min().ToString("N2")</div>
                            <div class="stat-label">Минимум</div>
                        </div>
                        <div class="stat">
                            <div class="stat-value">@values.Max().ToString("N2")</div>
                            <div class="stat-label">Максимум</div>
                        </div>
                    </div>
                    
                    <div class="distribution-chart">
                        <div class="chart-label">Распределение:</div>
                        <div class="chart-bars">
                            @foreach (var bar in GetDistributionBars(values, 5))
                            {
                                <div class="bar-container">
                                    <div class="bar" style="height: @bar.Height%"></div>
                                    <div class="bar-label">@bar.Label</div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        }

        <!-- Блок текстовых полей -->
        @foreach (var column in Columns.Where(c => !c.IsNumeric))
        {
            var values = GetTextValues(column.Name);
            if (values.Any())
            {
                <div class="stat-card">
                    <div class="card-header">
                        <i class="fas fa-font"></i> @GetColumnTranslation(column.Name)
                        <span class="data-type">(текстовый)</span>
                    </div>
                    
                    <div class="stats-row">
                        <div class="stat">
                            <div class="stat-value">@values.Distinct().Count()</div>
                            <div class="stat-label">Уникальных</div>
                        </div>
                        <div class="stat">
                            <div class="stat-value">@GetMostFrequentCount(values)</div>
                            <div class="stat-label">Частота макс.</div>
                        </div>
                    </div>
                    
                    <div class="top-values">
                        <div class="top-label">Частые значения:</div>
                        <ul>
                            @foreach (var item in GetTopValues(values, 3))
                            {
                                <li>
                                    <span class="value">@item.Value</span>
                                    <span class="count">@item.Count</span>
                                </li>
                            }
                        </ul>
                    </div>
                    
                    <div class="length-stats">
                        <div class="stat">
                            <div class="stat-value">@GetAverageLength(values).ToString("N1")</div>
                            <div class="stat-label">Ср. длина</div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <div class="report-footer">
        <button class="btn-export" @onclick="ExportToPdf">
            <i class="fas fa-file-pdf"></i> Экспорт в PDF
        </button>
    </div>
</div>

@code {
    [Parameter]
    public List<Dictionary<string, object>> Data { get; set; } = new();

    [Parameter]
    public List<DatabaseService.ColumnDefinition> Columns { get; set; } = new();

    [Parameter]
    public string TableName { get; set; } = "Данные";
    
    private readonly ConcurrentDictionary<string, string> _translationCache = new();
    
    private string AutoTranslateColumn(string columnName)
    {
        var cleanName = Regex.Replace(columnName, "[^a-zA-Zа-яА-Я0-9]", " ");
        cleanName = Regex.Replace(cleanName, "([a-zа-я])([A-ZА-Я])", "$1 $2");
        cleanName = cleanName.Replace("_", " ");
        
        var dictionary = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
        {
            {"id", "ИД"},
            {"name", "Имя"},
            {"date", "Дата"},
            {"time", "Время"},
            {"count", "Количество"},
            {"price", "Цена"},
            {"total", "Итого"},
            {"sum", "Сумма"},
            {"amount", "Сумма"},
            {"created", "Создано"},
            {"modified", "Изменено"},
            {"status", "Статус"},
            {"type", "Тип"},
            {"desc", "Описание"},
            {"description", "Описание"},
            {"is", "Флаг"},
            {"num", "Номер"},
            {"text", "Текст"},
            {"Tariff", "Тариф"},
            {"Minutes", "Минуты"},
            {"Internet", "Интернет"},
            {"gb", "гб"},
            {"Contract", "Контракт"},
            {"operator", "Оператор"},
            {"client", "Клиент"},
            {"last", "Последнее"},
            {"phone", "Телефон"},
            {"country","Страна"},
            {"call", "Звонок"},
            {"duration", "Длительность"}
        };
        
        var words = cleanName.Split(' ');
        for (int i = 0; i < words.Length; i++)
        {
            if (dictionary.TryGetValue(words[i], out var translation))
            {
                words[i] = translation;
            }
        }
        
        string result = string.Join(" ", words);
        return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(result.ToLower());
    }
    
    private string GetColumnTranslation(string columnName)
    {
        return _translationCache.GetOrAdd(columnName, AutoTranslateColumn);
    }
    

    private List<decimal> GetNumericValues(string columnName)
    {
        var values = new List<decimal>();
        foreach (var row in Data)
        {
            if (row.TryGetValue(columnName, out var val) && val != null)
            {
                if (decimal.TryParse(val.ToString(), out decimal num))
                {
                    values.Add(num);
                }
            }
        }
        return values;
    }
    
    private async Task ExportToPdf()
    {
        try
        {
            // Генерация PDF
            var pdfBytes = PdfReport.GenerateSummaryPdfReport(
                Data,
                Columns,
                TableName,
                Data.Count
            );

            // Скачивание файла
            var fileName = $"{TableName}_Summary_{DateTime.Now:yyyyMMdd_HHmm}.pdf";
            await JSRuntime.InvokeVoidAsync("downloadPdfFile", fileName, Convert.ToBase64String(pdfBytes));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка экспорта в PDF: {ex.Message}");
        }
    }

    private List<string> GetTextValues(string columnName)
    {
        return Data
            .Where(row => row.ContainsKey(columnName) && row[columnName] != null)
            .Select(row => row[columnName].ToString())
            .ToList();
    }

    private double CalculateNullPercentage()
    {
        if (!Data.Any()) return 0;
        
        int totalCells = Data.Count * Columns.Count;
        int filledCells = 0;
        
        foreach (var row in Data)
        {
            filledCells += row.Values.Count(v => v != null);
        }
        
        return Math.Round((filledCells / (double)totalCells) * 100, 1);
    }

    private List<(string Label, int Height)> GetDistributionBars(List<decimal> values, int segments)
    {
        if (!values.Any()) return new();
        
        decimal min = values.Min();
        decimal max = values.Max();
        decimal range = max - min;
        
        if (range == 0) return new() { ("100%", 100) };
        
        var segmentSize = range / segments;
        var counts = new int[segments];
        
        foreach (var value in values)
        {
            int index = Math.Min(segments - 1, (int)((value - min) / segmentSize));
            counts[index]++;
        }
        
        int maxCount = counts.Max();
        var result = new List<(string, int)>();
        
        for (int i = 0; i < segments; i++)
        {
            decimal lower = min + i * segmentSize;
            decimal upper = lower + segmentSize;
            string label = $"{lower.ToString("N0")}-{upper.ToString("N0")}";
            int height = maxCount > 0 ? (int)Math.Round((counts[i] / (double)maxCount) * 100) : 0;
            result.Add((label, height));
        }
        
        return result;
    }

    private List<(string Value, int Count)> GetTopValues(List<string> values, int topCount)
    {
        return values
            .GroupBy(v => v)
            .OrderByDescending(g => g.Count())
            .Take(topCount)
            .Select(g => (g.Key, g.Count()))
            .ToList();
    }

    private int GetMostFrequentCount(List<string> values)
    {
        if (!values.Any()) return 0;
        return values
            .GroupBy(v => v)
            .Max(g => g.Count());
    }

    private double GetAverageLength(List<string> values)
    {
        if (!values.Any()) return 0;
        return values.Average(v => v.Length);
    }

    private void ExportToExcel()
    {
        // Логика экспорта в Excel
        Console.WriteLine("Export to Excel triggered");
    }
}
