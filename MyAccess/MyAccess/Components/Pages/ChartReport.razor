@using System.Collections.Concurrent
@using System.Globalization
@using System.Text.Json
@using MyAccess.Services
@using System.Linq
@using System.Text.RegularExpressions
@inject IJSRuntime JSRuntime
@inject PdfReportService PdfService

<div class="chart-report-container">
    <div class="report-header">
        <h2><i class="fas fa-chart-bar"></i> Графический отчет</h2>
        <div class="header-info">
            <span class="timestamp">@DateTime.Now.ToString("dd.MM.yyyy HH:mm")</span>
            <span class="record-count">Записей: @Data?.Count.ToString()</span>
        </div>
    </div>

    <div class="chart-controls-panel">
        <div class="controls-grid">
            <div class="control-group">
                <label><i class="fas fa-chart-line"></i> Тип диаграммы:</label>
                <select class="form-control" @bind="selectedChartType">
                    <option value="bar">Столбчатая</option>
                    <option value="pie">Круговая</option>
                    <option value="line">Линейная</option>
                    <option value="doughnut">Кольцевая</option>
                </select>
            </div>

            <div class="control-group">
                <label><i class="fas fa-calculator"></i> Значения:</label>
                <select class="form-control" @bind="selectedColumn">
                    @if (Columns != null && Columns.Any())
                    {
                        @foreach (var column in Columns)
                        {
                            <option value="@column.Name">@GetColumnTranslation(column.Name)</option>
                        }
                    }
                    else
                    {
                        <option disabled>Нет доступных столбцов</option>
                    }
                </select>
            </div>

            <div class="control-group">
                <label><i class="fas fa-layer-group"></i> Группировка:</label>
                <select class="form-control" @bind="groupingColumn">
                    <option value="">- Без группировки -</option>
                    @if (Columns != null)
                    {
                        @foreach (var column in Columns)
                        {
                            <option value="@column.Name">@GetColumnTranslation(column.Name)</option>
                        }
                    }
                </select>
            </div>

            <div class="control-group">
                <label><i class="fas fa-function"></i> Агрегация:</label>
                <select class="form-control" @bind="aggregationType">
                    <option value="Sum">Сумма</option>
                    <option value="Average">Среднее</option>
                    <option value="Count">Количество</option>
                    <option value="Max">Максимум</option>
                    <option value="Min">Минимум</option>
                </select>
            </div>

            <div class="control-group">
                <label><i class="fas fa-sort-amount-down"></i> Лимит групп:</label>
                <input type="number" class="form-control" @bind="groupLimit" min="1" max="50" />
            </div>
        </div>

        <div class="action-buttons">
            <button class="btn-refresh" @onclick="UpdateChartData">
                <i class="fas fa-sync-alt"></i> Обновить
            </button>
            <button class="btn-export" @onclick="ExportChart">
                <i class="fas fa-download"></i> Экспорт графика
            </button>
            <button class="btn-export" @onclick="ExportToPdf">
                <i class="fas fa-file-pdf"></i> Экспорт в PDF
            </button>
        </div>
    </div>

    <div class="chart-area">
        @if (isLoading)
        {
            <div class="loading-indicator">
                <i class="fas fa-spinner fa-spin"></i> Загрузка данных...
            </div>
        }
        else if (!chartData.Any())
        {
            <div class="no-data-chart">
                <i class="no-data-icon">📊</i>
                <h3>@errorMessage</h3>
                <p>Проверьте настройки и попробуйте снова</p>
            </div>
        }
        else
        {
            <div class="chart-wrapper">
                <canvas id="@chartCanvasId"></canvas>
            </div>

            <div class="chart-data-table">
                <table>
                    <thead>
                    <tr>
                        <th>Группа</th>
                        <th>Значение</th>
                        <th>% от общего</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var item in chartData.OrderByDescending(d => d.Value))
                    {
                        <tr>
                            <td>@item.Label</td>
                            <td>@item.Value.ToString("N2")</td>
                            <td>@((totalValue > 0 ? item.Value / totalValue * 100 : 0).ToString("N1"))%</td>
                        </tr>
                    }
                    @if (hasMoreGroups)
                    {
                        <tr class="summary-row">
                            <td>Остальные группы</td>
                            <td>@otherGroupsValue.ToString("N2")</td>
                            <td>@((totalValue > 0 ? otherGroupsValue / totalValue * 100 : 0).ToString("N1"))%</td>
                        </tr>
                    }
                    <tr class="total-row">
                        <td><strong>Итого</strong></td>
                        <td><strong>@totalValue.ToString("N2")</strong></td>
                        <td><strong>100%</strong></td>
                    </tr>
                    </tbody>
                </table>
            </div>
        }
    </div>

    <div class="chart-summary">
        <div class="summary-card">
            <div class="summary-value">@chartData.Count</div>
            <div class="summary-label">Групп данных</div>
        </div>
        <div class="summary-card">
            <div class="summary-value">@maxValue.ToString("N2")</div>
            <div class="summary-label">Максимум</div>
        </div>
        <div class="summary-card">
            <div class="summary-value">@minValue.ToString("N2")</div>
            <div class="summary-label">Минимум</div>
        </div>
        <div class="summary-card">
            <div class="summary-value">@(chartData.Count > 0 ? (totalValue / chartData.Count).ToString("N2") : "0")</div>
            <div class="summary-label">Среднее</div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public List<Dictionary<string, object>> Data { get; set; } = new();

    [Parameter]
    public List<DatabaseService.ColumnDefinition> Columns { get; set; } = new();

    // Параметры отчета
    private string selectedChartType = "bar";
    private string selectedColumn = "";
    private string groupingColumn = "";
    private string aggregationType = "Sum";
    private int groupLimit = 10;
    private string errorMessage = "Нет данных для отображения";

    // Данные для графика
    private List<ChartData> chartData = new();
    private decimal totalValue;
    private decimal maxValue;
    private decimal minValue;
    private decimal otherGroupsValue;
    private bool hasMoreGroups;
    private bool isLoading;
    
    

    // Для работы с графиком
    private string chartCanvasId = $"chart_{Guid.NewGuid().ToString("N")}";
    
    private readonly ConcurrentDictionary<string, string> _translationCache = new();
    
    private string AutoTranslateColumn(string columnName)
    {
        var cleanName = Regex.Replace(columnName, "[^a-zA-Zа-яА-Я0-9]", " ");
        cleanName = Regex.Replace(cleanName, "([a-zа-я])([A-ZА-Я])", "$1 $2");
        cleanName = cleanName.Replace("_", " ");
        
        var dictionary = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
        {
            {"id", "ИД"},
            {"name", "Имя"},
            {"date", "Дата"},
            {"time", "Время"},
            {"count", "Количество"},
            {"price", "Цена"},
            {"total", "Итого"},
            {"sum", "Сумма"},
            {"amount", "Сумма"},
            {"created", "Создано"},
            {"modified", "Изменено"},
            {"status", "Статус"},
            {"type", "Тип"},
            {"desc", "Описание"},
            {"description", "Описание"},
            {"is", "Флаг"},
            {"num", "Номер"},
            {"text", "Текст"},
            {"Tariff", "Тариф"},
            {"Minutes", "Минуты"},
            {"Internet", "Интернет"},
            {"gb", "гб"},
            {"Contract", "Контракт"},
            {"operator", "Оператор"},
            {"client", "Клиент"},
            {"last", "Последнее"},
            {"phone", "Телефон"},
            {"country","Страна"},
            {"call", "Звонок"},
            {"duration", "Длительность"}
        };
        
        var words = cleanName.Split(' ');
        for (int i = 0; i < words.Length; i++)
        {
            if (dictionary.TryGetValue(words[i], out var translation))
            {
                words[i] = translation;
            }
        }
        
        string result = string.Join(" ", words);
        return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(result.ToLower());
    }
    
    private string GetColumnTranslation(string columnName)
    {
        return _translationCache.GetOrAdd(columnName, AutoTranslateColumn);
    }
    
    private async Task ExportToPdf()
    {
        if (!chartData.Any()) return;

        try
        {
            isLoading = true;
            StateHasChanged();

            // Получаем изображение графика
            var chartImage = await GetChartImageBase64();
            
            // Генерируем PDF
            var pdfBytes = PdfService.GenerateChartReportPdf(
                title: "Графический отчет",
                tableName: "T",
                recordCount: Data?.Count ?? 0,
                timestamp: DateTime.Now.ToString("dd.MM.yyyy HH:mm"),
                chartTitle: GetChartTitle(),
                chartImageBase64: chartImage,
                chartData: chartData.Select(d => new PdfReportService.ChartDataPdf {
                    Label = d.Label,
                    Value = d.Value
                }).ToList(),
                totalValue: totalValue,
                maxValue: maxValue,
                minValue: minValue,
                otherGroupsValue: otherGroupsValue,
                hasMoreGroups: hasMoreGroups
            );

            // Скачиваем файл
            var fileName = $"TName_ChartReport_{DateTime.Now:yyyyMMdd_HHmm}.pdf";
            await JSRuntime.InvokeVoidAsync("downloadPdfFile", fileName, Convert.ToBase64String(pdfBytes));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка экспорта в PDF: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Ошибка экспорта в PDF: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task<string> GetChartImageBase64()
    {
        try
        {
            // Получаем DataURL изображения
            var dataUrl = await JSRuntime.InvokeAsync<string>("getChartImage", chartCanvasId);
            
            // Извлекаем base64 часть
            if (dataUrl.StartsWith("data:image/png;base64,"))
            {
                return dataUrl.Substring("data:image/png;base64,".Length);
            }
            return dataUrl;
        }
        catch
        {
            return string.Empty;
        }
    }

    private string GetChartTitle()
    {
        var title = $"График: {selectedColumn} ({GetAggregationName()})";
        if (!string.IsNullOrEmpty(groupingColumn))
        {
            title += $" по {groupingColumn}";
        }
        return title;
    }

    private string GetAggregationName()
    {
        return aggregationType switch
        {
            "Sum" => "Сумма",
            "Average" => "Среднее",
            "Count" => "Количество",
            "Max" => "Максимум",
            "Min" => "Минимум",
            _ => aggregationType
        };
    }

    protected override void OnInitialized()
    {
        // Инициализация выбранного столбца
        if (Columns != null && Columns.Any())
        {
            selectedColumn = Columns.First().Name;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Динамически загружаем Chart.js
            await LoadChartJs();
        }

        if (chartData.Any())
        {
            await RenderChart();
        }
    }

    private async Task LoadChartJs()
    {
        await JSRuntime.InvokeVoidAsync("eval", @"
            if (!window.chartJsLoaded) {
                const script = document.createElement('script');
                script.src = 'https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.js';
                script.onload = () => window.chartJsLoaded = true;
                document.head.appendChild(script);
                
                // Инициализируем хранилище графиков
                window.chartInstances = window.chartInstances || {};
            }
        ");
    }

    private async Task UpdateChartData()
    {
        isLoading = true;
        errorMessage = "Нет данных для отображения";
        StateHasChanged();

        try
        {
            // Сброс предыдущих данных
            chartData.Clear();
            totalValue = 0;
            maxValue = 0;
            minValue = 0;
            otherGroupsValue = 0;
            hasMoreGroups = false;

            // Проверка наличия данных
            if (Data == null || !Data.Any())
            {
                errorMessage = "Таблица не содержит данных";
                return;
            }

            if (string.IsNullOrEmpty(selectedColumn))
            {
                errorMessage = "Не выбран столбец для анализа";
                return;
            }

            // Проверяем, содержит ли столбец числовые данные
            bool hasNumericData = false;
            foreach (var row in Data)
            {
                if (row.TryGetValue(selectedColumn, out var value) &&
                    value != null &&
                    IsNumericValue(value))
                {
                    hasNumericData = true;
                    break;
                }
            }

            if (!hasNumericData)
            {
                errorMessage = $"Столбец '{selectedColumn}' не содержит числовых данных";
                return;
            }

            // Сбор данных для группировки
            var groupedData = new Dictionary<string, List<decimal>>();

            if (!string.IsNullOrEmpty(groupingColumn))
            {
                // Группировка по выбранному столбцу
                foreach (var row in Data)
                {
                    object? groupValue = null;
                    if (row.TryGetValue(groupingColumn, out var gv))
                    {
                        groupValue = gv;
                    }

                    var groupName = groupValue?.ToString() ?? "N/A";

                    if (row.TryGetValue(selectedColumn, out var value) && value != null)
                    {
                        if (TryConvertToDecimal(value, out decimal numValue))
                        {
                            if (!groupedData.ContainsKey(groupName))
                            {
                                groupedData[groupName] = new List<decimal>();
                            }
                            groupedData[groupName].Add(numValue);
                        }
                    }
                }
            }
            else
            {
                // Без группировки - все данные как одна группа
                groupedData["Все данные"] = new List<decimal>();
                foreach (var row in Data)
                {
                    if (row.TryGetValue(selectedColumn, out var value) && value != null)
                    {
                        if (TryConvertToDecimal(value, out decimal numValue))
                        {
                            groupedData["Все данные"].Add(numValue);
                        }
                    }
                }
            }

            // Применение агрегации
            foreach (var group in groupedData)
            {
                if (!group.Value.Any()) continue;

                decimal aggregatedValue = aggregationType switch
                {
                    "Average" => group.Value.Average(),
                    "Count" => group.Value.Count,
                    "Max" => group.Value.Max(),
                    "Min" => group.Value.Min(),
                    _ => group.Value.Sum() // По умолчанию Sum
                };

                chartData.Add(new ChartData
                {
                    Label = group.Key,
                    Value = aggregatedValue
                });
            }

            if (!chartData.Any())
            {
                errorMessage = "Не удалось рассчитать данные для графика";
                return;
            }

            // Применение лимита групп
            if (chartData.Count > groupLimit)
            {
                var orderedData = chartData.OrderByDescending(d => d.Value).ToList();
                var mainData = orderedData.Take(groupLimit - 1).ToList();
                otherGroupsValue = orderedData.Skip(groupLimit - 1).Sum(d => d.Value);

                chartData = mainData;
                chartData.Add(new ChartData
                {
                    Label = "Другие группы",
                    Value = otherGroupsValue
                });

                hasMoreGroups = true;
            }

            // Расчет итоговых значений
            if (chartData.Any())
            {
                totalValue = chartData.Sum(d => d.Value);
                maxValue = chartData.Max(d => d.Value);
                minValue = chartData.Min(d => d.Value);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка: {ex.Message}";
            Console.WriteLine($"Ошибка при создании отчета: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool IsNumericValue(object value)
    {
        return value is int || value is long || value as int? != null ||
               value is decimal || value as decimal? != null ||
               value is double || value as double? != null ||
               value is float || value as float? != null;
    }

    private bool TryConvertToDecimal(object value, out decimal result)
    {
        result = 0;

        try
        {
            if (value is int i) result = i;
            else if (value is long l) result = l;
            else if (value is double d) result = (decimal)d;
            else if (value is float f) result = (decimal)f;
            else if (value is decimal dm) result = dm;
            else if (value is string s) return decimal.TryParse(s, out result);
            else return false;

            return true;
        }
        catch
        {
            return false;
        }
    }

    private async Task RenderChart()
    {
        if (!chartData.Any()) return;

        try
        {
            var labels = JsonSerializer.Serialize(chartData.Select(d => d.Label));
            var values = JsonSerializer.Serialize(chartData.Select(d => (double)d.Value));

            await JSRuntime.InvokeVoidAsync("createOrUpdateChart",
                chartCanvasId,
                selectedChartType,
                labels,
                values,
                totalValue.ToString("N2")
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при отрисовке графика: {ex.Message}");
        }
    }

    private async Task ExportChart()
    {
        if (!chartData.Any()) return;

        try
        {
            await JSRuntime.InvokeVoidAsync("exportChartAsImage",
                chartCanvasId,
                $"График_{DateTime.Now:yyyyMMdd_HHmm}"
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка экспорта: {ex.Message}");
        }
    }

    private class ChartData
    {
        public string Label { get; set; } = "";
        public decimal Value { get; set; }
    }
}