@page "/database/{DbName}"
@inherits ComponentBase
@namespace MyAccess.Pages
@using System.Collections.Concurrent
@using System.Globalization
@using System.Text.RegularExpressions
@using MyAccess.Services
@inject DatabaseService DbService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="db-container">
    @if (tables == null)
    {
        <div class="loading">
            <div class="spinner"></div>
            <p>Загрузка данных...</p>
        </div>
    }
    else
    {
        <div class="db-header">
            <div class="header-left">
                <h1>@GetColumnTranslation(DbName)</h1>
                <div class="tables-count">Таблиц: @tables.Count</div>
            </div>
            <div class="header-right">
                <button class="create-table-btn" @onclick="ShowCreateTableDialog">
                    + Новая таблица
                </button>
                <button class="back-button" @onclick="NavigateToHome">← Назад</button>
            </div>
        </div>

        <div class="tables-grid">
            @foreach (var table in tables)
            {
                <div class="table-card">
                    <div class="table-actions">
                        <button class="icon-btn edit-btn" @onclick="() => ShowEditTableDialog(table)">
                            ✎
                        </button>
                        <button class="icon-btn delete-btn" @onclick="() => DeleteTable(table)">
                            ✕
                        </button>
                    </div>
                    <div class="table-content cursor-pointer" 
                         @onclick="() => NavigateToTable(table)">
                        <div class="table-icon">📑</div>
                        <div class="table-name">@GetColumnTranslation(table)</div>
                    </div>
                </div>
            }
        </div>

        @if (showTableDialog)
        {
            <div class="dialog-overlay">
                <div class="dialog-content">
                    <h3>@(isEditing ? "Редактирование таблицы" : "Новая таблица")</h3>
                    <div class="form-group">
                        <label>Имя таблицы:</label>
                        <input @bind="newTableName" disabled="@isEditing" />
                    </div>

                    <div class="columns-header">
                        <span>Колонки</span>
                        <button class="add-column-btn" @onclick="AddNewColumn">+ Добавить</button>
                    </div>

                    <div class="columns-list">
                        @foreach (var column in columns)
                        {
                            <div class="column-item">
                                <input @bind="column.Name" 
                                       placeholder="Имя колонки" 
                                       class="column-input" />

                                <select @bind="column.Type" class="type-select">
                                    <option value="integer">INTEGER</option>
                                    <option value="text">TEXT</option>
                                    <option value="varchar(255)">VARCHAR(255)</option>
                                    <option value="boolean">BOOLEAN</option>
                                    <option value="date">DATE</option>
                                    <option value="timestamp">TIMESTAMP</option>
                                </select>

                                <div class="check-group">
                                    <label class="pk-check">
                                        <input type="checkbox" @bind="column.IsPrimaryKey" />
                                        PK
                                    </label>
        
                                    <label class="fk-check">
                                        <input type="checkbox" @bind="column.IsForeignKey" />
                                        FK
                                    </label>
                                </div>

                                @if (column.IsForeignKey)
                                {
                                    <div class="foreign-group">
                                        <select @bind="column.ForeignTable" class="foreign-select">
                                            <option value="">Выберите таблицу</option>
                                            @foreach (var table in availableTablesAndColumns.Keys.Where(t => t != newTableName))
                                            {
                                                <option value="@table">@GetColumnTranslation(table)</option>
                                            }
                                        </select>

                                        @if (!string.IsNullOrEmpty(column.ForeignTable))
                                        {
                                            <select @bind="column.ForeignColumn" class="foreign-select">
                                                <option value="">Выберите колонку</option>
                                                @foreach (var col in availableTablesAndColumns[column.ForeignTable])
                                                {
                                                    <option value="@col">@GetColumnTranslation(col)</option>
                                                }
                                            </select>
                                        }
                                    </div>
                                }

                                <button class="remove-column-btn" 
                                        title="Удалить колонку"
                                        @onclick="() => RemoveColumn(column)">
                                    ✕
                                </button>
                            </div>
                        }
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="error-message">@errorMessage</div>
                    }

                    <div class="dialog-actions">
                        <button class="primary-btn" @onclick="SaveTable">
                            @(isEditing ? "Сохранить" : "Создать")
                        </button>
                        <button class="cancel-btn" @onclick="CloseTableDialog">Отмена</button>
                    </div>
                </div>
            </div>
        }
    }
</div>


@code {
    [Parameter] public string DbName { get; set; }

    private List<string> tables;
    private string selectedTable;
    private List<Dictionary<string, object>> rows;
    private bool showTableDialog;
    private bool isEditing;
    private string newTableName;
    private List<DatabaseService.ColumnDefinition> columns = new();
    private string originalTableName;
    private string errorMessage;
    
    private Dictionary<string, List<string>> availableTablesAndColumns = new();
    
    private readonly ConcurrentDictionary<string, string> _translationCache = new();
    
    private string AutoTranslateColumn(string columnName)
    {
        var cleanName = Regex.Replace(columnName, "[^a-zA-Zа-яА-Я0-9]", " ");
        cleanName = Regex.Replace(cleanName, "([a-zа-я])([A-ZА-Я])", "$1 $2");
        //cleanName = cleanName.Replace("", " ");
        
        var dictionary = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
        {
            {"id", "ИД"},
            {"name", "Имя"},
            {"date", "Дата"},
            {"time", "Время"},
            {"count", "Количество"},
            {"price", "Цена"},
            {"total", "Итого"},
            {"sum", "Сумма"},
            {"amount", "Сумма"},
            {"created", "Создано"},
            {"modified", "Изменено"},
            {"status", "Статус"},
            {"type", "Тип"},
            {"desc", "Описание"},
            {"description", "Описание"},
            {"is", "Флаг"},
            {"num", "Номер"},
            {"text", "Текст"},
            {"Tariffs", "Тарифы"},
            {"Minutes", "Минуты"},
            {"Internet", "Интернет"},
            {"gb", "гб"},
            {"Contracts", "Контракты"},
            {"operators", "Операторы"},
            {"clients", "Клиенты"},
            {"client", "Клиент"},
            {"operator", "Оператор"},
            {"last", "Последнее"},
            {"phone", "Телефон"},
            {"country","Страна"},
            {"calls", "Звоноки"},
            {"duration", "Длительность"},
            {"telecom", "Телеком"},
            {"db", "бд"}
        };
        
        var words = cleanName.Split(' ');
        for (int i = 0; i < words.Length; i++)
        {
            if (dictionary.TryGetValue(words[i], out var translation))
            {
                words[i] = translation;
            }
        }
        
        string result = string.Join(" ", words);
        return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(result.ToLower());
    }
    
    private string GetColumnTranslation(string columnName)
    {
        return _translationCache.GetOrAdd(columnName, AutoTranslateColumn);
    }
    
    private async Task LoadAvailableTablesAndColumns()
    {
        availableTablesAndColumns.Clear();
        var allTables = await DbService.GetTablesAsync(DbName);

        foreach (var table in allTables)
        {
            var cols = await DbService.GetTableColumnsAsync(DbName, table);
            availableTablesAndColumns[table] = cols.Select(c => c.Name).ToList();
        }
    }



    private void NavigateToTable(string tableName)
    {
        var encodedTable = System.Net.WebUtility.UrlEncode(tableName);
        Navigation.NavigateTo($"/database/{DbName}/table/{encodedTable}");
    }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadTables();
        await LoadAvailableTablesAndColumns();

    }

    private async Task LoadTables()
    {
        try
        {
            tables = await DbService.GetTablesAsync(DbName);
        }
        catch
        {
            Navigation.NavigateTo("/");
        }
    }

    private void CloseTable()
    {
        selectedTable = null;
        rows = null;
    }

    private void NavigateToHome()
    {
        Navigation.NavigateTo("/");
    }

    private void ShowCreateTableDialog()
    {
        isEditing = false;
        newTableName = "";
        columns.Clear();
        errorMessage = "";
        showTableDialog = true;
    }

    private async Task ShowEditTableDialog(string tableName)
    {
        try
        {
            isEditing = true;
            originalTableName = tableName;
            newTableName = tableName;
            columns = await DbService.GetTableColumnsAsync(DbName, tableName);
            errorMessage = "";
            showTableDialog = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка загрузки структуры: {ex.Message}";
        }
    }

    private void AddNewColumn()
    {
        columns.Add(new DatabaseService.ColumnDefinition
        {
            Name = $"column{columns.Count + 1}",
            Type = "text"
        });
    }

    private void RemoveColumn(DatabaseService.ColumnDefinition column)
    {
        columns.Remove(column);
    }

    private async Task SaveTable()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(newTableName))
            {
                errorMessage = "Введите имя таблицы";
                return;
            }

            if (columns.Count == 0)
            {
                errorMessage = "Добавьте хотя бы одну колонку";
                return;
            }

            if (columns.Count(c => c.IsPrimaryKey) > 1)
            {
                errorMessage = "Может быть только один первичный ключ";
                return;
            }

            if (isEditing)
            {
                await DbService.UpdateTableAsync(DbName, originalTableName, newTableName, columns);
            }
            else
            {
                await DbService.CreateTableAsync(DbName, newTableName, columns);
            }

            await LoadTables();
            showTableDialog = false;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task DeleteTable(string tableName)
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"Удалить таблицу '{tableName}'?");
        if (confirm)
        {
            try
            {
                await DbService.DeleteTableAsync(DbName, tableName);
                await LoadTables();
                if (selectedTable == tableName) CloseTable();
            }
            catch (Exception ex)
            {
                errorMessage = $"Ошибка удаления: {ex.Message}";
                StateHasChanged();
            }
        }
    }

    private void CloseTableDialog()
    {
        showTableDialog = false;
        columns.Clear();
        errorMessage = "";
    }

}